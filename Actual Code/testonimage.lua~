require 'torch'   -- torch
require 'xlua'    -- xlua provides useful tools, like progress bars
require 'optim'   -- an optimization package, for online and batch methods
require 'nn'
require 'cutorch'
require 'image'
----------------------------------------------------------------------

-- model:
torch.setdefaulttensortype('torch.FloatTensor')
local t
t=torch.load('results/model.net')
local i=0
local j=0
local src = image.load('traintest.png',3)
while i<160 do
	while j<256 do
		local inputs = torch.Tensor(1,1,32,32)
		local img = image.load('imageData/imi'..i..'j'..j..'.png')
		local channels = {'y','u','v'}
		local mean = {}
		local std = {}
		
		for i,channel in ipairs(channels) do
		   mean[i] = img[1]:mean()
		   std[i] = img[1]:std()
		   img[1]:add(-mean[i])
		   img[1]:div(std[i])
		end

		inputs[1]=img[1]
		local preds = t:forward(inputs)
		-- print(preds[1])
		
        if preds[1][1]>preds[1][2] and preds[1][1]>preds[1][3] then
        print('..i..,..j.. is a tool 1')
		src=image.drawRect(src, i, j, i+2, j+2, {lineWidth = 2, color = {255, 0, 0}})
        end
        if preds[1][2]>preds[1][1] and preds[1][2]>preds[1][3] then
		print('..i..,..j.. is a tool 2')
		src=image.drawRect(src, i, j, i+2, j+2, {lineWidth = 2, color = {0, 255, 0}})
        end
        if preds[1][3]>preds[1][1] and preds[1][3]>preds[1][2] then
		print(''..i..','..j..' is a background')
		src=image.drawRect(src, i, j, i+2, j+2, {lineWidth = 2, color = {0, 0, 255}})
        end
		
    	j=j+2
	end
	i=i+2
	j=0
end
image.save('kyapata.png', src)
